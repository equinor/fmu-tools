
def set_data_constant(config: dict):
    """
    This method is a utility in order to set surface and 3D grid property data
    to a given value. The value must be of the correct type (if discrete 3D
    property for example). The purpose of it is to make sure that those data
    are properly generated by the modelling workflow and not inherited from a
    previous run with the corresponding jobs deactivated. The data are set to a
    value triggering attention and not deleted in order not to reset some jobs
    in RMS.

    The input of this method is a Python dictionary with defined keys. The keys
    "project" and "value" are required while "horizons", "zones" and
    "grid_models" are optional (at least one of them should be provided for the
    method to have any effect).

    project
        The roxar magic keyword ``project`` refering to the current RMS project.

    value
        The constant value to assign to the data. It could be 0 or -999 for
        example. If discrete properties from grid models are modified, the
        value should be applicable (integer).

    horizons
        A Python dictionary where each key corresponds to the name of the
        horizons category where horizon data need to be made empty. The value
        associated to this key should be a list of horizon names to modify. If
        a string ``all`` is assigned instead of a list, all available horizon
        names for this category will be used.
        Alternatively, if a list of horizons categories is given instead of a
        dictionary, the method will apply to all horizons within these horizons
        categories.

    zones
        A Python dictionary where each key corresponds to the name of the zones
        category where zone data need to be made empty. The value associated to
        this key should be a list of zone names to modify. If a string ``all``
        is assigned instead of a list, all available zone names for this
        category will be used.
        Alternatively, if a list of zones categories is given instead of a
        dictionary, the method will apply to all zones within these zones
        categories.

    grid_models
        A Python dictionary where each key corresponds to the name of the grid
        models where properties need to be made empty. The value associated to
        this key should be a list of property names to modify. If a string
        ``all`` is assigned instead of a list, all available properties for
        this grid model name will be used.
        Alternatively, if a list of grid models names is given instead of a
        dictionary, the method will apply to all properties within these grid
        models.
    """

    import roxar

    assert isinstance(config, dict), "Argument must be a Python dictionary!"
    assert "project" in config.keys(), "Input dict must contain key 'project'!"
    project = config["project"]
    assert "value" in config.keys(), "Input dict must contain key 'value'!"
    value = config["value"]


    def set_safe_value(project, surf_type, name, data_type, value):
        """
        Method to set the horizon or zone surface to the defined value.
        Returns True if the operation succeeded, False otherwise.
        """
        success = False
        try:
            if surf_type == "horizon":
                surf = project.horizons[name][data_type]
            else:
                surf = project.zones[name][data_type]
            grid2D = surf.get_grid()
            grid2D.set_values(grid2D.get_values() * 0.0 + value)
            surf.set_grid(grid2D)
            success = True
            print(" >> >> "+name)
        except Exception as e:
            print(" >> >> "+name+" cannot be modified")
            print(e)
        return success


    # HORIZON DATA
    if "horizons" in config.keys():
        print("Set horizons values to "+str(value)+"...")
        if isinstance(config["horizons"], list):
            # work directly at horizon category level
            for data_type in config["horizons"]:
                print(" >> "+data_type)
                for horizon in project.horizons:
                    set_safe_value(project, "horizon", horizon.name, data_type,
                                   value)

        elif isinstance(config["horizons"], dict):
            # check setup for each horizon category (list vs. all)
            hor_cat = config["horizons"].keys()
            for data_type in hor_cat:
                print(" >> "+data_type)
                horizons = config["horizons"][data_type]
                if isinstance(horizons, str):
                    if horizons == "all":
                        for horizon in project.horizons:
                            set_safe_value(project, "horizon", horizon.name,
                                           data_type, value)
                    else:
                        assert False, ("keyword '"+horizons+
                                       "' not recognized, 'all' expected!")
                elif isinstance(horizons, list):
                    for horizon in horizons:
                        set_safe_value(project, "horizon", horizon, data_type,
                                       value)

        else:
            assert False, ("Value associated with key 'horizons' must be of "
                           "type list or dict!")


    # ZONE DATA
    if "zones" in config.keys():
        print("Set zones values to "+str(value)+"...")
        if isinstance(config["zones"], list):
            # work directly at zone category level
            for data_type in config["zones"]:
                print(" >> "+data_type)
                for zone in project.zones:
                    set_safe_value(project, "zone", zone.name, data_type, value)

        elif isinstance(config["zones"], dict):
            # check setup for each zone category (list vs. all)
            hor_cat = config["zones"].keys()
            for data_type in hor_cat:
                print(" >> "+data_type)
                zones = config["zones"][data_type]
                if isinstance(zones, str):
                    if zones == "all":
                        for zone in project.zones:
                            set_safe_value(project, "zone", zone.name,
                                           data_type, value)
                    else:
                        assert False, ("keyword '"+zones+
                                       "' not recognized, 'all' expected!")
                elif isinstance(zones, list):
                    for zone in zones:
                        set_safe_value(project, "zone", zone, data_type, value)

        else:
            assert False, ("Value associated with key 'zones' must be of "
                           "type list or dict!")


    # GRID MODEL DATA
    if "grid_models" in config.keys():
        print("Set 3D grid properties values to "+str(value)+"...")
        if isinstance(config["grid_models"], list):
            # work directly at grid models level
            for gridname in config["grid_models"]:
                print(" >> "+gridname)
                grid = project.grid_models[gridname]
                for prop in grid.properties:
                    try:
                        prop.set_values(prop.get_values() * 0 + value)
                        print(" >> >> "+prop.name)
                    except:
                        print(" >> >> "+prop.name+" is already empty")

        elif isinstance(config["grid_models"], dict):
            # check setup for each grid models (list vs. all)
            gridnames = config["grid_models"].keys()
            for gridname in gridnames:
                print(" >> "+gridname)
                grid = project.grid_models[gridname]
                propnames = config["grid_models"][gridname]
                if isinstance(propnames, str):
                    if propnames == "all":
                        for prop in grid.properties:
                            try:
                                prop.set_values(prop.get_values() * 0 + value)
                                print(" >> >> "+prop.name)
                            except:
                                print(" >> >> "+prop.name+" is already empty")
                    else:
                        assert False, ("keyword "+zones+
                                       "not recognized, 'all' expected!")
                elif isinstance(propnames, list):
                    for propname in propnames:
                        try:
                            prop = grid.properties[propname]
                            prop.set_values(prop.get_values() * 0 + value)
                            print(" >> >> "+prop.name)
                        except Exception as e:
                            print(" >> >> "+prop.name+" is already empty")
                            print(e)

        else:
            assert False, ("Value associated with key 'zones' must be of "
                           "type list or dict!")

    print("End of function set_data_constant().")
